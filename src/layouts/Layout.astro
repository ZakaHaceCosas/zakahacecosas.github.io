<!doctype html>
<html>
    <head>
        <script
            src="https://analytics.ahrefs.com/analytics.js"
            data-key="y5ZFxqJEyM+7GvuWdCne3g"
            async></script>
        <!-- ^ analytics -->
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <!-- tired of dealing with this idiot <meta
            http-equiv="Content-Security-Policy"
            content="default-src 'self'; 
            style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; 
            font-src 'self' https://fonts.gstatic.com; 
            img-src 'self' https://zakahacecosas.github.io; 
            child-src 'none'; 
            frame-ancestors 'none'; 
            script-src 'self';"
        /> -->
        <!--begin basics-->
        <title>ZakaHaceCosas&trade;</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <!--end basics-->

        <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
        />
        <!-- NOTE: maybe download the fonts and serve them from GitHub so google does not spy on us? -->

        <!--begin top 10 biggest CSS-->
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/main.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/epicBoxes.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/scrollbar.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/scrollAnimation.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/lang.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/bento.css"
        />
        <link
            rel="stylesheet"
            href="https://zakahacecosas.github.io/css/responsive.css"
        />
        <!--end top 10 biggest CSS-->

        <!--begin icons-->
        <link
            rel="apple-touch-icon"
            href="https://zakahacecosas.github.io/design/icon.webp"
        />
        <link
            rel="icon"
            href="https://zakahacecosas.github.io/design/icon.webp"
            type="image/webp"
        />
        <!--end icons-->

        <!--begin meta-->
        <!--basic-->
        <meta name="title" content="ZakaHaceCosas" />
        <meta name="description" content="I'm Zaka and I Make Stuff." />
        <meta name="author" content="ZakaHaceCosas" />
        <meta name="robots" content="index, follow" />
        <!--open graph-->
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="ZakaHaceCosas" />
        <meta property="og:title" content="ZakaHaceCosas" />
        <meta property="og:description" content="I'm Zaka and I Make Stuff." />
        <meta
            name="og:image"
            content="https://zakahacecosas.github.io/design/banner.webp"
        />
        <!--twitter-->
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="ZakaHaceCosas" />
        <meta name="twitter:description" content="I'm Zaka and I Make Stuff." />
        <meta
            name="twitter:image"
            content="https://zakahacecosas.github.io/design/banner.webp"
        />
        <!--extra stuff-->
        <meta name="theme-color" content="#19FF73" />
        <!--(optix was the OG username, btw ) -->
        <meta
            name="keywords"
            content="Zaka, ZakaHaceCosas, Optix, LeOptix, portfolio, developer"
        />
        <!--end meta-->

        <script>
            /* LABELS */
            document.addEventListener("DOMContentLoaded", () => {
                const boxes: NodeListOf<Element> =
                    document.querySelectorAll("box");

                boxes.forEach((box: Element) => {
                    const allLabels: string | null = box.getAttribute("labels");
                    if (!allLabels) {
                        return; // no labels = just ignore
                    }

                    const flexElement: Element | null =
                        box.querySelector("flex");
                    if (!flexElement) {
                        console.error(
                            "If this is running, it means a card WITH labels doesn't have the <flex> element. Check your code."
                        );
                        throw new Error(
                            "Error: No flex element on labeled card."
                        );
                    }

                    // visual fix
                    (flexElement as HTMLElement).style.marginTop = "10px";

                    // creates a <labeler> and adds labels to it before inserting it into the <box>
                    const labeler: HTMLElement =
                        document.createElement("labeler");
                    const fragment = document.createDocumentFragment();

                    allLabels.split(",").forEach((label: string) => {
                        const labelElement: HTMLElement =
                            document.createElement("label");
                        labelElement.innerText = label;
                        fragment.appendChild(labelElement);
                    });

                    // labels are added to the labeler to avoid issues with flex styling
                    // now this is done in a single operation (for performance)
                    labeler.appendChild(fragment);

                    // append the labeler before the flex element
                    box.insertBefore(labeler, flexElement);
                });
            });

            /* LANGS */
            enum Languages {
                English = "en",
                Spanish = "es",
            }

            function setLang(lang: Languages) {
                if (lang !== Languages.English && lang !== Languages.Spanish) {
                    throw new Error(
                        "Why are you trying to set the language to something that isn't 'en' or 'es'?"
                    );
                }

                const expirationDate = new Date();
                expirationDate.setDate(expirationDate.getDate() + 365);
                try {
                    localStorage.setItem("selectedLang", lang);
                    localStorage.setItem(
                        "langExpiration",
                        expirationDate.toISOString()
                    );
                } catch (e) {
                    console.error("Error accessing localStorage", e);
                }
                document.documentElement.setAttribute("lang", lang);
            }

            document.addEventListener("DOMContentLoaded", function () {
                function testLang(test: string): Languages {
                    return /^es/i.test(test)
                        ? Languages.Spanish
                        : Languages.English;
                }

                try {
                    const selectedLang = localStorage.getItem("selectedLang");
                    const langExpiration =
                        localStorage.getItem("langExpiration");

                    const isInvalidLang =
                        selectedLang !== Languages.English &&
                        selectedLang !== Languages.Spanish;

                    if (selectedLang && langExpiration) {
                        const expirationDate = new Date(langExpiration);
                        if (
                            !isNaN(expirationDate.getTime()) &&
                            expirationDate > new Date()
                        ) {
                            if (isInvalidLang) {
                                localStorage.removeItem("selectedLang");
                                localStorage.removeItem("langExpiration");
                                setLang(testLang(navigator.language));
                            } else {
                                setLang(selectedLang as Languages);
                            }
                        } else {
                            localStorage.removeItem("selectedLang");
                            localStorage.removeItem("langExpiration");
                            setLang(testLang(navigator.language));
                        }
                    } else {
                        setLang(testLang(navigator.language));
                    }
                } catch (e) {
                    console.error("Error accessing localStorage", e);
                    setLang(testLang(navigator.language));
                }

                const switchToEnglish: HTMLElement | null =
                    document.getElementById("setLangEn");
                const switchToSpanish: HTMLElement | null =
                    document.getElementById("setLangEs");

                if (!switchToEnglish || !switchToSpanish) {
                    console.error(
                        "Either 'setLangEn' or 'setLangEs' is missing. Check your code."
                    );
                    throw new Error(
                        "Either 'setLangEn' or 'setLangEs' is missing. Check your code."
                    );
                }

                switchToEnglish.addEventListener("click", function () {
                    setLang(Languages.English);
                });

                switchToSpanish.addEventListener("click", function () {
                    setLang(Languages.Spanish);
                });
            });

            /* AOS */
            // animate on scroll with intersection observer API
            // if for some reason you're inspecting this, feel free to copy it lol
            const thingsToAnimate: NodeListOf<Element> =
                document.querySelectorAll<Element>(".animation");

            const observerCallback = (
                entries: IntersectionObserverEntry[]
            ): void => {
                entries.forEach((entry: IntersectionObserverEntry) => {
                    const targetElement = entry.target as HTMLElement;

                    if (entry.isIntersecting) {
                        targetElement.classList.add("scroll-animation");
                        observer.unobserve(targetElement); // animate once
                    } else {
                        targetElement.classList.remove("scroll-animation");
                    }
                });
            };

            const observer: IntersectionObserver = new IntersectionObserver(
                observerCallback,
                { threshold: 0.5 }
            );

            thingsToAnimate.forEach((element: Element) => {
                observer.observe(element);
            });
        </script>
    </head>
    <body>
        <!--
        this one has eager loading because turns out lazy loading can make it sometimes not load at all, specially on mobile
        -->
        <img
            loading="eager"
            src="https://zakahacecosas.github.io/design/grad-og.webp"
            alt="Decorative gradient"
            class="colorinchi"
        />
        <slot />
        <footer class="zakaBoxBlur animation">
            <p>&copy; ZakaHaceCosas, 2021-2025</p>
            <p class="disclaimer">
                <esp>
                    Todos los derechos reservados. Mi logo y mis demás diseños
                    están hechos por mí. Nota: Algunos de los logos aquí
                    mostrados NO SON MÍOS y
                    <b>están protegidos por DERECHOS DE AUTOR</b>. No los uses
                    sin consentimiento del autor.
                </esp>
                <eng>
                    All rights reserved. My logo and my other designs are made
                    by myself. Note: some of the logos shown here are NOT MINE
                    and
                    <b>are COPYRIGHTED</b>. Do not use them without author's
                    consent.
                </eng>
            </p>
        </footer>
    </body>
</html>
