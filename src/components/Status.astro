---
interface Props {
    status: "notAvailable" | "available" | "busy";
}

const { status } = Astro.props;

const statusTextMap = {
    available: {
        esp: "Disponible",
        eng: "Available",
        longTextEsp: `Acepto comisiones / encargos. ¡Genial! Escríbeme por donde sea, <b>preferible Discord</b>, y hagamos cosas épicas.`, // Trabajo gratis para ganar experiencia (y por no tener cuenta bancaria para cobrar), aunque también acepto BTC.
        longTextEng: `I am available for hire. Great! Text me anywhere, <b>preferably Discord</b>, and lets make epic things.`,
        className: "god",
    },
    busy: {
        esp: "Ocupado",
        eng: "Busy",
        longTextEsp: `Acepto comisiones / encargos, PERO que no te sorprendan (de momento) respuestas tardías o problemas para aceptar encargos. Ando mal de tiempo.`,
        longTextEng: `I am for hire, BUT don't be surprised (for now) by late replies or problems to accept some works. I'm lacking time.`,
        className: "meh",
    },
    notAvailable: {
        esp: "Muy ocupado",
        eng: "Very busy",
        longTextEsp: `<b>De momento NO acepto comisiones / encargos.</b> Volvió el curso escolar y las responsabilidades se me acumulan. No puedo ofrecer nada. Lo siento.`,
        longTextEng: `<b>I am NOT available for hire, for now.</b> I really lack spare time for now as I'm dealing with my studies. Sorry.`,
        className: "nah",
    },
};

const workingObject =
    status === "available"
        ? statusTextMap.available
        : status === "busy"
          ? statusTextMap.busy
          : statusTextMap.notAvailable;
---

<div class="zakaBox zakaBoxBlur animation status-item">
    <p>
        <esp>Estado</esp>
        <eng>Status</eng>
    </p>
    <h2 class={workingObject.className}>
        <esp>{workingObject.esp}</esp>
        <eng>{workingObject.eng}</eng>
    </h2>
    <p>
        <esp>{workingObject.longTextEsp}</esp>
        <eng>{workingObject.longTextEng}</eng>
    </p>
</div>
